1.


(ir.lda <- Ida(log(ir), ir.species))

ir.ld <- predict(ir.lda, dirnen =2)$x
eqscplot(ir.ld, type = "n", xlab = "first linear discrirninant" ,
ylab = "second linear discrirninant")
text(ir.ld, labels = as.character(ir.species[-143]),
col =3 + codes(ir.species), cex =0.8)

plot(ir.lda, dirnen =1)
plot(ir.lda, type = "density", dirnen = 1)
------------------------------------------

(dcrabs.lda <- lda(crabs$sex - FL + RW + CL + CW, lcrabs))
table(crabs$sex, predict(dcrabs.lda)$class)

(dcrabs.lda4 <- lda(crabs.grp - FL + RW + CL + CW, lcrabs))

cr.t <- dcrabs.pr4$x[, 1:2]
eqscplot(cr.t, type = "n", xlab = "First LD", ylab = "SecondLD") text(cr.t, labels =as.character(crabs.grp))
perp <- function(x, y) {
	m <- (x+y)/2
	s <- - (x[l] - y[1])/(x[2] - y[2]) 
	abline(c(m[2] - s*m[l] , s)) 
	invisible()
}
cr.m <- lda(cr.t, crabs$sex)$means
points(cr.m, pch = 3, mkh = 0.3) 
perp(cr.m[l, ], cr.m[2, ])
cr.lda <- lda(cr.t, crabs.grp)

x <- seq(-6, 6, 0.25)
Y <- seq(-2, 2, 0.25)
Xcon <- matrix(c(rep(x,length(y)), rep(y, each = length(x))) ,,2) 
cr.pr <- predict(cr.lda, Xcon)$post[, c("B", "0")] %*% c(1,1) 
contour(x, y, matrix(cr.pr, length(x), length(y)),levels = 0.5, labex = 0, add = T, lty= 3)

for(i in c("O", "o", "B", "b"))
print(var(lcrabs[crabs.grp == i, ]))

fgl .ld <- predict(lda(type - ., fgl), dirnen = 2)$x eqscplot(fgl.ld, type = "n", xlab = "LD1", ylab = "LD2") 
# either
for(i in seq(along = levels(fgl$type))) {
	set <- fgl$type[-40] == levels(fgl$type)[i]
	points(fgl.ld[set,], pch = 18, cex = 0.6, col = 2 + i)} 
key(text = list (levels (fgl$type), col = 3:8))
# or
text(fgl.ld, cex = 0.6,
labels = c ("F", "N", "V", "C", "T", "H") [fgl$type [-40]] )

fgl.rld <- predict(lda(type - ., fgl, method = "t"), dimen = 2)$x 
eqscplot(fgl.rld, type = "n", xlab = "LD1", ylab = "LD2")
# either
for(i in seq(along = levels(fgl$typeÂ») {
	set <- fgl$type[-40] == levels(fgl$type)[i]
	points(fgl.rld[set,], pch = 18, cex = 0.6, col = 2 + i)} 
key(text = list (levels (fgl$type), col = 3:8))
# or
text(fgl.rld, cex =0.6, labels = c("F", "N", "V", "C", "T", "H")[fgl$type[-40]])

2.

cush <- log(as.matrix(Cushings[, -3]))
tp <- Cushings$Type[1:21, drop = T]
cush.lda <- Ida(cush[1 :21,], tp); predplot(cush.lda, "LDA") 
cush.qda <- qda(cush[1:21,], tp); predplot(cush.qda, "QDA")
predplot (cush. qda, "QDA (predictive)", method = "predictive")
predplot (cush. qda, "QDA (debiased)", method = "debiased")

library(nnet)
Cf <- data.frame(tp = tp,
	Tetrahydrocortisone = log(Cushings[1:21, 1]),
	Pregnanetriol = log(Cushings[1:21, 2]) ) cush.multinom <- multinom(tp - T etrahydrocortisone
	+ Pregnanetriol, Cf, maxit = 250)
xp <- seq(0.6, 4.0, length =100); np <- length(xp) 
yp <- seq(-3.25, 2.45, length = 100)
cushT <- expand.grid(Tetrahydrocortisone = xp, Pregnanetriol = yp)
Z <- predict(cush.multinom, cushT, type = "probs")
cushplot(xp, yp, Z)

# R: library(tree)
cush.tr <- tree(tp - Tetrahydrocortisone + Pregnanetriol, Cf) 
plot(cush[, 1], cush[, 2], type = "n", xlab = "Tetrahydrocortisone" , ylab = "Pregnanetriol") 
for(il in 1:4) {
	set <- Cushings$Type==levels(Cushings$Type)[il] 
	text(cush[set, 1], cush[set, 2],
		labels = as.character(Cushings$Type[set]), col = 2 + il) } 
	par(cex = 1.5); partition.tree(cush.tr, add = T); par(cex = 1)

3.

library(class)
Z <- knn(scale(cush[1:21, J, F, c(3.4, 5.7)), scale(cushT, F, c(3.4, 5.7)), tp) cushplot(xp, yp, class.ind(Z))
Z <- knn(scale(cush, F, c(3.4, 5.7)), scale(cushT, F, c(3.4, 5.7)), tp, k =3)
cushplot(xp, yp, class.ind(Z))

library(nnet)
cush <- cush[1:21,J; tpi <- class.ind(tp)
# functions pltnn and plt.bndry given in the scripts par(mfrow = c(2, 2))
pltnn("Size = 2")
set.seed(1); plt.bndry(size = 2, col = 2)

set.seed(3); plt.bndry(size = 2, col=3) plt.bndry(size = 2, col = 4)

pltnn("Size = 2, lambda = 0.001") set.seed(1); plt.bndry(size = 2, decay
= 0.001, col =2)
set.seed(2); plt.bndry(size = 2, decay
= 0.001, col =4)

pltnn("Size = 2, lambda = 0.01") set.seed(1); plt.bndry(size = 2, decay
= 0.01, col =2)
set.seed(2); plt.bndry(size = 2, decay
= 0.01, col =4)

pltnn("Size = 5,20 lambda = 0.01") set.seed(1); plt.bndry(size = 5, decay
= 0.01, col =1)
set.seed(2); plt.bndry(size = 20, decay
= 0.01, col =2)

Z <- matrix(O, nrow(cushT), ncol(tpi)) 

for(iter in 1:20) {
	set.seed(iter)
	cush.nn <- nnet(cush, tpi, skip = T, softmax = T, size = 3,
		decay =0.01, maxit =1000, trace =F) 
	Z <- Z + predict(cush.nn, cushT)
# In Rreplace ~ by $ in next line.
	cat("final value", format(round(cush.nn$value,3)), "\n") 
	b1(predict(cush.nn, cushT), col = 2, lwd = 0.5)
}
pltnn("Averaged") 
b1(Z, lwd =3)

5. 


 # R: library(el071)
 # S: library(libsvm)
crabs.svm <- svm(crabs$sp ~ ., data = lcrabs, cost = 100, gamma = 1)
 table(true = crabs$sp, predicted = predict(crabs.svm))

 svm(crabs$sp ~ ., data = lcrabs, cost=100, gamma=1, cross = 10)

6.

set.seed(123); rand <- sampIe (10, 214, replace = T) 
con <- function(...)

{
	print(tab <- table(...)); diag(tab) <-0
	cat("error rate =", round(100*sum(tab)/length(list (. .. ) [[1]]),2), "%\n") 
	invisible()
}
CVtest <- function(fitfn, predfn, ... ){
	res <- fgl$type
	for (i in sort(unique(rand))) {
		cat("fold ", i, "\n", sep = "")
		learn <- fitfn(rand != i, ... )
		res [rand == i] <- predfn(learn, rand == i)
	}
	res 
}
res.multinom <- CVtest(
	function(x, ... ) multinom(type - ., fgl[x, ], ... ), 
	function(obj, x) predict(obj, fgl[x, ], type ="class"), 
	maxit =1000, trace =F)

con(true = fgl$type, predicted = res.multinom)

 res.lda <- CVtest(
function(x, ... ) lda(type - ., fgl[x, ], ... ), 
function(obj, x) predict(obj, fgl[x, ])$class )

con(true = fgl$type, predicted = res.lda)

fg10 <- fgl[ , -10] # drop type
{ res<- fgl$type 
for(i in sort(unique(rand))) {
	cat("fold ", i ,"\n", sep = "")
	sub <- rand == i
	res[sub] <- knn(fgl0[ !sub, ], fgl0[sub, ], fgl$type[!sub],k=1)
}
res} -> res.knn1
 con(true =fgl$type, predicted =res.knn1)

res.lb <- knn(fgl0, fgl0, fgl$type, k = 3, prob =T, use.all =F) 
 table(attr(res.lb, "prob"))

library(rpart) 
res.rpart <- CVtest(
	function(x, ... ) {
		tr <- rpart(type ~ ., fgl[x,] , ... )
		cp <- tr$cptable
		r <- cp[, 4] + cp[, 5]
		rmin <- min(seq(along = r)[cp[, 4] < min(r)]) 
		cp0 <- cp[rmin, 1]
		cat("size chosen was", cp[rmin, 2] + 1, "\n") 
		prune(tr, cp = 1.01*cpO)
	},
	function(obj, x)
		predict(obj, fgl[x, ], type = "class"), 
	cp = 0.001)
con(true =fgl$type, predicted =res.rpart)

fgl1 <- fgl
fgl1[1:9] <- lapply(fgl[, 1:9], function(x){r <- range(x); (x - r[1])/diff(r)})

res.nn2 <- CVnn2(type ~ ., fgl1, skip = T, maxit = 500, nreps = 10)
con(true = fgl$type, predicted = res.nn2)

sum(as.numeric(truth) != max.col(res/nreps))

sum(-log(res[cbind(seq(along = truth), as.numeric(truth))]/nreps))

res.svm <- CVtest(
	function(x, ... ) svm(type ~ ., fgl[x, ], ... ), 
	function(obj, x) predict(obj, fgl[x, ]),
	cost =100, gamma =1 )

con(true =fgl$type, predicted =res.svm)

 svm(type ~ ., data =fgl, cost =100, gamma =1, cross =10)

cd0 <- Ivqinit(fg10, fgl$type, prior =rep(1, 6)/6, k =3) 
cd1 <- olvq1(fg10, fgl$type, cd0)
con(true = fgl$type, predicted = Ivqtest(cd1, fg10))

CV.lvq <- function()
{
	res <- fgl$type
	for(i in sort(unique(randÂ») {
		cat("doing fold", i, "\n")
		cd0 <- Ivqinit(fgl0[rand != i,], fgl$type[rand != i],prior = rep(1, 6)/6, k = 3)
		cd1 <- olvq1(fgl0[rand != i,], fgl$type[rand != i], cd0)
		cd1 <- Ivq3(fgl0[rand != i,], fgl$type[rand != i], cd1, niter = 10000)
		res [rand == i] <- Ivqtest(cd1, fgl0[rand == i, ])
	}
	res
}
con(true = fgl$type, predicted = CV.lvq())

7. 

CVprobs <- function(fitfn, predfn, ... ) {
res <- matrix(, 214, 6)
for (i in sort(unique(rand))) {
	cat("fold ", i, "\n", sep = "")
	learn <- fitfn(rand != i, ...)
	res [rand == i, ] <- predfn(learn, rand == i)
	}
	res
}
probs.multinom <- CVprobs(
	function(x, ... ) multinom(type - ., fgl[x, ], ...),
	function(obj, x) predict(obj, fgl[x, ], type = "probs"), 
	maxit = 1000, trace = F )

probs.yes <- as.vector(class.ind(fgl$type))
probs <- as.vector(probs.multinom)
par(pty = "s")
plot(c(0, 1), c(0, 1), type = "n", xlab = "predicted probability",
	ylab = "", xaxs = "i", yaxs = "i", las = 1) 
rug(probs[probs.yes= = 0],0.02, side 1, lwd = 0.5) 
rug(probs[probs.yes == 1],0.02, side = 3, lwd = 0.5) 
abline (0, 1)
newp <- seq(0, 1, length = 100)
lines(newp, predict(loess(probs.yes - probs, span = 1), newp))
